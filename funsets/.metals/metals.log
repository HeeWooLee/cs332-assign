2022.09.14 21:15:53 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\.metals\lsp.trace.json or C:\Users\dangn\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.09.14 21:15:57 INFO  logging to file C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\.metals\metals.log
2022.09.14 21:15:57 INFO  Started: Metals version 0.11.8 in workspace 'C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets' for client Visual Studio Code 1.70.0.
2022.09.14 21:16:02 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.09.14 21:16:04 INFO  time: initialize in 7.06s
2022.09.14 21:16:09 WARN  Build server is not auto-connectable.
2022.09.14 21:16:09 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.14 21:16:09 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\Main.scala
2022.09.14 21:16:09 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSetsInterface.scala
2022.09.14 21:16:09 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.14 21:16:20 INFO  no build target found for C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.09.14 21:16:28 INFO  time: code lens generation in 17s
2022.09.14 23:05:42 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.14 23:07:28 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.14 23:07:46 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.14 23:08:41 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
9월 14, 2022 11:09:33 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 115
2022.09.14 23:11:07 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.14 23:11:23 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.14 23:12:16 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.14 23:14:43 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
9월 14, 2022 11:17:30 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 726
9월 14, 2022 11:19:09 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 940
2022.09.14 23:24:53 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.14 23:25:13 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.14 23:28:54 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.14 23:29:44 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
9월 14, 2022 11:52:05 오후 org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
정보: Unsupported notification method: $/setTrace
2022.09.15 15:54:32 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\.metals\lsp.trace.json or C:\Users\dangn\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.09.15 15:54:36 INFO  logging to file C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\.metals\metals.log
2022.09.15 15:54:36 INFO  Started: Metals version 0.11.8 in workspace 'C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets' for client Visual Studio Code 1.70.0.
2022.09.15 15:54:46 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.09.15 15:54:46 INFO  time: initialize in 10s
2022.09.15 15:54:51 WARN  Build server is not auto-connectable.
2022.09.15 15:54:51 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.15 15:54:53 INFO  skipping build import with status 'Requested'
2022.09.15 15:55:05 INFO  no build target found for C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.09.15 15:56:32 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assignments\funsets\src\main\scala\funsets\FunSets.scala
9월 15, 2022 3:56:32 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 8
2022.09.15 15:56:40 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.15 15:56:46 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSetsInterface.scala
9월 15, 2022 3:57:10 오후 org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
정보: Unsupported notification method: $/setTrace
9월 15, 2022 3:57:17 오후 org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
정보: Unsupported notification method: $/setTrace
2022.09.15 16:00:06 INFO  time: code lens generation in 1.06s
9월 15, 2022 4:00:21 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 54
2022.09.15 16:00:21 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assignments\funsets\src\main\scala\funsets\FunSets.scala
2022.09.15 16:12:00 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.15 16:16:39 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSetsInterface.scala
2022.09.15 16:16:48 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\Main.scala
2022.09.15 16:17:19 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:21:26 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:21:32 INFO  time: code lens generation in 4.97s
error while checking  extends Testsets {
  val null = null
}
error while checking new Testsets {
  val null = null
}
error while checking {
  new Testsets {
    val null = null
  }
}
error while checking test("interesect contains all elements both in set")(
  {
    new Testsets {
      val null = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("interesect contains all elements both in set")(
    {
      new Testsets {
        val null = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("interesect contains all elements both in set")(
    {
      new Testsets {
        val null = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("interesect contains all elements both in set")(
      {
        new Testsets {
          val null = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 4:28:28 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends Testsets {
  val null = null
} # -1,
parent span = <2078..2101>,
child       = val null = null # -1,
child span  = [2098..2104..2104]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends Testsets {
  val null = null
} # -1,
parent span = <2078..2101>,
child       = val null = null # -1,
child span  = [2098..2104..2104]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

9월 15, 2022 4:28:35 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 1017
9월 15, 2022 4:31:07 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 1333
9월 15, 2022 4:37:43 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 1894
9월 15, 2022 4:38:25 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 1931
9월 15, 2022 4:40:32 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 2273
2022.09.15 16:42:19 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.15 16:42:21 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:47:39 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:47:51 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:48:31 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:48:57 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:49:38 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:54:39 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:55:19 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:56:12 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:56:57 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:57:27 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:58:00 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:58:17 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 16:58:44 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 17:00:18 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 17:01:13 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.15 17:20:22 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
error while checking  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int assert (contains), <error>: <error>) = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def isEven(i: Int assert (contains), <error>: <error>) = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def isEven(i: Int assert (contains), <error>: <error>) = null
  }
}
error while checking test("filter contains all element that holds given predicate")(
  {
    new TestSets {
      val m = union(s1, s2)
      def isEven(i: Int assert (contains), <error>: <error>) = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int assert (contains), <error>: <error>) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int assert (contains), <error>: <error>) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int assert (contains), <error>: <error>) = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 5:29:54 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int assert (contains), <error>: <error>) = null
} # -1,
parent span = <2716..2915>,
child       = def isEven(i: Int assert (contains), <error>: <error>) = null # -1,
child span  = [2764..2768..2918]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int assert (contains), <error>: <error>) = null
} # -1,
parent span = <2716..2915>,
child       = def isEven(i: Int assert (contains), <error>: <error>) = null # -1,
child span  = [2764..2768..2918]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

2022.09.15 17:31:15 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
error while checking  extends TestSets {
  val null = null
}
error while checking new TestSets {
  val null = null
}
error while checking {
  new TestSets {
    val null = null
  }
}
error while checking test(
  "exists checks whether there exists a element that satisfies given predicate"
)(
  {
    new TestSets {
      val null = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val null = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val null = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val null = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:02:26 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val null = null
} # -1,
parent span = <3279..3302>,
child       = val null = null # -1,
child span  = [3299..3305..3305]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val null = null
} # -1,
parent span = <3279..3302>,
child       = val null = null # -1,
child span  = [3299..3305..3305]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def i = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def i = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def i = null
  }
}
error while checking test(
  "exists checks whether there exists a element that satisfies given predicate"
)(
  {
    new TestSets {
      val m = union(s1, s2)
      def i = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def i = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def i = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          def i = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:02:38 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def i = null
} # -1,
parent span = <3279..3332>,
child       = def i = null # -1,
child span  = [3327..3331..3335]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def i = null
} # -1,
parent span = <3279..3332>,
child       = def i = null # -1,
child span  = [3327..3331..3335]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def isE = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def isE = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def isE = null
  }
}
error while checking test(
  "exists checks whether there exists a element that satisfies given predicate"
)(
  {
    new TestSets {
      val m = union(s1, s2)
      def isE = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isE = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isE = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          def isE = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:02:39 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isE = null
} # -1,
parent span = <3279..3334>,
child       = def isE = null # -1,
child span  = [3327..3331..3337]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isE = null
} # -1,
parent span = <3279..3334>,
child       = def isE = null # -1,
child span  = [3327..3331..3337]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def isEv = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def isEv = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def isEv = null
  }
}
error while checking test(
  "exists checks whether there exists a element that satisfies given predicate"
)(
  {
    new TestSets {
      val m = union(s1, s2)
      def isEv = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEv = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEv = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEv = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:02:41 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEv = null
} # -1,
parent span = <3279..3335>,
child       = def isEv = null # -1,
child span  = [3327..3331..3338]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEv = null
} # -1,
parent span = <3279..3335>,
child       = def isEv = null # -1,
child span  = [3327..3331..3338]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def isEven() = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def isEven() = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def isEven() = null
  }
}
error while checking test(
  "exists checks whether there exists a element that satisfies given predicate"
)(
  {
    new TestSets {
      val m = union(s1, s2)
      def isEven() = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven() = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven() = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven() = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:02:43 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven() = null
} # -1,
parent span = <3279..3339>,
child       = def isEven() = null # -1,
child span  = [3327..3331..3342]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven() = null
} # -1,
parent span = <3279..3339>,
child       = def isEven() = null # -1,
child span  = [3327..3331..3342]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.SignatureHelpProvider$.signatureHelp(SignatureHelpProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: <error>) = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def isEven(i: <error>) = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def isEven(i: <error>) = null
  }
}
error while checking test(
  "exists checks whether there exists a element that satisfies given predicate"
)(
  {
    new TestSets {
      val m = union(s1, s2)
      def isEven(i: <error>) = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: <error>) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: <error>) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: <error>) = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:02:46 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: <error>) = null
} # -1,
parent span = <3279..3340>,
child       = def isEven(i: <error>) = null # -1,
child span  = [3327..3331..3343]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: <error>) = null
} # -1,
parent span = <3279..3340>,
child       = def isEven(i: <error>) = null # -1,
child span  = [3327..3331..3343]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: I) = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def isEven(i: I) = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def isEven(i: I) = null
  }
}
error while checking test(
  "exists checks whether there exists a element that satisfies given predicate"
)(
  {
    new TestSets {
      val m = union(s1, s2)
      def isEven(i: I) = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: I) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: I) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: I) = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:02:48 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: I) = null
} # -1,
parent span = <3279..3343>,
child       = def isEven(i: I) = null # -1,
child span  = [3327..3331..3346]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: I) = null
} # -1,
parent span = <3279..3343>,
child       = def isEven(i: I) = null # -1,
child span  = [3327..3331..3346]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val null = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val null = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def isEven(i: Int) = (i % 2 == 0)
    val null = null
  }
}
error while checking test(
  "exists checks whether there exists a element that satisfies given predicate"
)(
  {
    new TestSets {
      val m = union(s1, s2)
      def isEven(i: Int) = (i % 2 == 0)
      val null = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val null = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val null = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val null = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:03:24 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val null = null
} # -1,
parent span = <3279..3366>,
child       = val null = null # -1,
child span  = [3363..3369..3369]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val null = null
} # -1,
parent span = <3279..3366>,
child       = val null = null # -1,
child span  = [3363..3369..3369]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val null = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val null = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def isEven(i: Int) = (i % 2 == 0)
    val null = null
  }
}
error while checking test(
  "exists checks whether there exists a element that satisfies given predicate"
)(
  {
    new TestSets {
      val m = union(s1, s2)
      def isEven(i: Int) = (i % 2 == 0)
      val null = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val null = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val null = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val null = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:03:25 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val null = null
} # -1,
parent span = <3279..3366>,
child       = val null = null # -1,
child span  = [3363..3369..3369]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val null = null
} # -1,
parent span = <3279..3366>,
child       = val null = null # -1,
child span  = [3363..3369..3369]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val s = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val s = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def isEven(i: Int) = (i % 2 == 0)
    val s = null
  }
}
error while checking test(
  "exists checks whether there exists a element that satisfies given predicate"
)(
  {
    new TestSets {
      val m = union(s1, s2)
      def isEven(i: Int) = (i % 2 == 0)
      val s = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:03:28 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val s = null
} # -1,
parent span = <3279..3368>,
child       = val s = null # -1,
child span  = [3363..3367..3371]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def isEven(i: Int) = (i % 2 == 0)
  val s = null
} # -1,
parent span = <3279..3368>,
child       = val s = null # -1,
child span  = [3363..3367..3371]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  val n = singleton(1001)
  def isEven(i: Int) = (i % 2 == 0)
  val s = exists(m, isEven)
  assert(! s, null)
}
error while checking new TestSets {
  val m = union(s1, s2)
  val n = singleton(1001)
  def isEven(i: Int) = (i % 2 == 0)
  val s = exists(m, isEven)
  assert(! s, null)
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    val n = singleton(1001)
    def isEven(i: Int) = (i % 2 == 0)
    val s = exists(m, isEven)
    assert(! s, null)
  }
}
error while checking test(
  "exists checks whether there exists a element that satisfies given predicate"
)(
  {
    new TestSets {
      val m = union(s1, s2)
      val n = singleton(1001)
      def isEven(i: Int) = (i % 2 == 0)
      val s = exists(m, isEven)
      assert(! s, null)
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singleton(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        assert(! s, null)
      }
    }
  )
  Exists )import scala null
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singleton(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        assert(! s, null)
      }
    }
  )
  Exists )import scala null
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = singleton(1001)
          def isEven(i: Int) = (i % 2 == 0)
          val s = exists(m, isEven)
          assert(! s, null)
        }
      }
    )
    Exists )import scala null
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:05:53 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  val n = singleton(1001)
  def isEven(i: Int) = (i % 2 == 0)
  val s = exists(m, isEven)
  assert(! s, null)
} # -1,
parent span = <3005..3171>,
child       = assert(! s, null) # -1,
child span  = [3151..3157..3174]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  val n = singleton(1001)
  def isEven(i: Int) = (i % 2 == 0)
  val s = exists(m, isEven)
  assert(! s, null)
} # -1,
parent span = <3005..3171>,
child       = assert(! s, null) # -1,
child span  = [3151..3157..3174]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:41)

2022.09.15 18:07:00 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 18:07:42 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
9월 15, 2022 6:08:06 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 4891
9월 15, 2022 6:08:40 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 4977
2022.09.15 18:08:53 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 18:08:56 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 18:11:45 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
error while checking  extends TestSets {
  val null = null
}
error while checking new TestSets {
  val null = null
}
error while checking {
  new TestSets {
    val null = null
  }
}
error while checking test("map transform each element according to given function")(
  {
    new TestSets {
      val null = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val null = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val null = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = singletonSet(1001)
          def isEven(i: Int) = (i % 2 == 0)
          val s = exists(m, isEven)
          val t = exists(n, isEven)
          assert(s, "Exists 1")
        }
      }
    )
    test("map transform each element according to given function")(
      {
        new TestSets {
          val null = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:17:47 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val null = null
} # -1,
parent span = <3283..3306>,
child       = val null = null # -1,
child span  = [3303..3309..3309]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val null = null
} # -1,
parent span = <3283..3306>,
child       = val null = null # -1,
child span  = [3303..3309..3309]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def <error> = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def <error> = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def <error> = null
  }
}
error while checking test("map transform each element according to given function")(
  {
    new TestSets {
      val m = union(s1, s2)
      def <error> = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def <error> = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def <error> = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = singletonSet(1001)
          def isEven(i: Int) = (i % 2 == 0)
          val s = exists(m, isEven)
          val t = exists(n, isEven)
          assert(s, "Exists 1")
        }
      }
    )
    test("map transform each element according to given function")(
      {
        new TestSets {
          val m = union(s1, s2)
          def <error> = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:18:30 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def <error> = null
} # -1,
parent span = <3283..3337>,
child       = def <error> = null # -1,
child span  = [3331..3335..3340]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def <error> = null
} # -1,
parent span = <3283..3337>,
child       = def <error> = null # -1,
child span  = [3331..3335..3340]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.SignatureHelpProvider$.signatureHelp(SignatureHelpProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def D = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def D = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def D = null
  }
}
error while checking test("map transform each element according to given function")(
  {
    new TestSets {
      val m = union(s1, s2)
      def D = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def D = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def D = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = singletonSet(1001)
          def isEven(i: Int) = (i % 2 == 0)
          val s = exists(m, isEven)
          val t = exists(n, isEven)
          assert(s, "Exists 1")
        }
      }
    )
    test("map transform each element according to given function")(
      {
        new TestSets {
          val m = union(s1, s2)
          def D = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:18:33 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def D = null
} # -1,
parent span = <3283..3336>,
child       = def D = null # -1,
child span  = [3331..3335..3339]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def D = null
} # -1,
parent span = <3283..3336>,
child       = def D = null # -1,
child span  = [3331..3335..3339]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def Double = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def Double = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def Double = null
  }
}
error while checking test("map transform each element according to given function")(
  {
    new TestSets {
      val m = union(s1, s2)
      def Double = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = singletonSet(1001)
          def isEven(i: Int) = (i % 2 == 0)
          val s = exists(m, isEven)
          val t = exists(n, isEven)
          assert(s, "Exists 1")
        }
      }
    )
    test("map transform each element according to given function")(
      {
        new TestSets {
          val m = union(s1, s2)
          def Double = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:18:34 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double = null
} # -1,
parent span = <3283..3341>,
child       = def Double = null # -1,
child span  = [3331..3335..3344]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double = null
} # -1,
parent span = <3283..3341>,
child       = def Double = null # -1,
child span  = [3331..3335..3344]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def Double() = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def Double() = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def Double() = null
  }
}
error while checking test("map transform each element according to given function")(
  {
    new TestSets {
      val m = union(s1, s2)
      def Double() = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double() = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double() = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = singletonSet(1001)
          def isEven(i: Int) = (i % 2 == 0)
          val s = exists(m, isEven)
          val t = exists(n, isEven)
          assert(s, "Exists 1")
        }
      }
    )
    test("map transform each element according to given function")(
      {
        new TestSets {
          val m = union(s1, s2)
          def Double() = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:19:45 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double() = null
} # -1,
parent span = <3283..3343>,
child       = def Double() = null # -1,
child span  = [3331..3335..3346]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double() = null
} # -1,
parent span = <3283..3343>,
child       = def Double() = null # -1,
child span  = [3331..3335..3346]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.SignatureHelpProvider$.signatureHelp(SignatureHelpProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def Double(i: <error>) = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def Double(i: <error>) = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def Double(i: <error>) = null
  }
}
error while checking test("map transform each element according to given function")(
  {
    new TestSets {
      val m = union(s1, s2)
      def Double(i: <error>) = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double(i: <error>) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double(i: <error>) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = singletonSet(1001)
          def isEven(i: Int) = (i % 2 == 0)
          val s = exists(m, isEven)
          val t = exists(n, isEven)
          assert(s, "Exists 1")
        }
      }
    )
    test("map transform each element according to given function")(
      {
        new TestSets {
          val m = union(s1, s2)
          def Double(i: <error>) = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:19:45 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double(i: <error>) = null
} # -1,
parent span = <3283..3344>,
child       = def Double(i: <error>) = null # -1,
child span  = [3331..3335..3347]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double(i: <error>) = null
} # -1,
parent span = <3283..3344>,
child       = def Double(i: <error>) = null # -1,
child span  = [3331..3335..3347]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def Double(i: <error>) = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def Double(i: <error>) = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def Double(i: <error>) = null
  }
}
error while checking test("map transform each element according to given function")(
  {
    new TestSets {
      val m = union(s1, s2)
      def Double(i: <error>) = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double(i: <error>) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double(i: <error>) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = singletonSet(1001)
          def isEven(i: Int) = (i % 2 == 0)
          val s = exists(m, isEven)
          val t = exists(n, isEven)
          assert(s, "Exists 1")
        }
      }
    )
    test("map transform each element according to given function")(
      {
        new TestSets {
          val m = union(s1, s2)
          def Double(i: <error>) = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:19:45 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double(i: <error>) = null
} # -1,
parent span = <3283..3344>,
child       = def Double(i: <error>) = null # -1,
child span  = [3331..3335..3347]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double(i: <error>) = null
} # -1,
parent span = <3283..3344>,
child       = def Double(i: <error>) = null # -1,
child span  = [3331..3335..3347]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.SignatureHelpProvider$.signatureHelp(SignatureHelpProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def Double(i: O) = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def Double(i: O) = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def Double(i: O) = null
  }
}
error while checking test("map transform each element according to given function")(
  {
    new TestSets {
      val m = union(s1, s2)
      def Double(i: O) = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double(i: O) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double(i: O) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = singletonSet(1001)
          def isEven(i: Int) = (i % 2 == 0)
          val s = exists(m, isEven)
          val t = exists(n, isEven)
          assert(s, "Exists 1")
        }
      }
    )
    test("map transform each element according to given function")(
      {
        new TestSets {
          val m = union(s1, s2)
          def Double(i: O) = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:19:47 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double(i: O) = null
} # -1,
parent span = <3283..3346>,
child       = def Double(i: O) = null # -1,
child span  = [3331..3335..3349]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double(i: O) = null
} # -1,
parent span = <3283..3346>,
child       = def Double(i: O) = null # -1,
child span  = [3331..3335..3349]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def Double(i: I) = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def Double(i: I) = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def Double(i: I) = null
  }
}
error while checking test("map transform each element according to given function")(
  {
    new TestSets {
      val m = union(s1, s2)
      def Double(i: I) = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double(i: I) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def Double(i: I) = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = singletonSet(1001)
          def isEven(i: Int) = (i % 2 == 0)
          val s = exists(m, isEven)
          val t = exists(n, isEven)
          assert(s, "Exists 1")
        }
      }
    )
    test("map transform each element according to given function")(
      {
        new TestSets {
          val m = union(s1, s2)
          def Double(i: I) = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:19:48 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double(i: I) = null
} # -1,
parent span = <3283..3346>,
child       = def Double(i: I) = null # -1,
child span  = [3331..3335..3349]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def Double(i: I) = null
} # -1,
parent span = <3283..3346>,
child       = def Double(i: I) = null # -1,
child span  = [3331..3335..3349]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

error while checking  extends TestSets {
  val m = union(s1, s2)
  def makeDouble(i: Int) = (2 * i)
  val s = null
}
error while checking new TestSets {
  val m = union(s1, s2)
  def makeDouble(i: Int) = (2 * i)
  val s = null
}
error while checking {
  new TestSets {
    val m = union(s1, s2)
    def makeDouble(i: Int) = (2 * i)
    val s = null
  }
}
error while checking test("map transform each element according to given function")(
  {
    new TestSets {
      val m = union(s1, s2)
      def makeDouble(i: Int) = (2 * i)
      val s = null
    }
  }
)
error while checking  extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def makeDouble(i: Int) = (2 * i)
        val s = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking class FunSetSuite extends munit.FunSuite {
  import FunSets.*
  test("contains is implemented")(
    {
      assert(contains(x => true, 100))
    }
  )
  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }
  test("singleton set one contains one")(
    {
      new TestSets {
        assert(contains(s1, 1), "Singleton")
      }
    }
  )
  test("union contains all elements of each set")(
    {
      new TestSets {
        val s = union(s1, s2)
        assert(contains(s, 1), "Union 1")
        assert(contains(s, 2), "Union 2")
        assert(! contains(s, 3), "Union 3")
      }
    }
  )
  test("intersect contains all elements both in set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = intersect(m, n)
        assert(! contains(s, 1), "Intersect 1")
        assert(contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("difference contains all element both in set but not in another set")(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = union(s2, s3)
        val s = diff(m, n)
        assert(contains(s, 1), "Intersect 1")
        assert(! contains(s, 2), "Intersect 2")
        assert(! contains(s, 3), "Intersect 2")
      }
    }
  )
  test("filter contains all element that holds given predicate")(
    {
      new TestSets {
        val m = union(s1, s2)
        def isEven(i: Int) = (i % 2 == 0)
        val s = filter(m, isEven)
        assert(! contains(s, 1), "Filter 1")
        assert(contains(s, 2), "Filter 2")
      }
    }
  )
  test(
    "exists checks whether there exists a element that satisfies given predicate"
  )(
    {
      new TestSets {
        val m = union(s1, s2)
        val n = singletonSet(1001)
        def isEven(i: Int) = (i % 2 == 0)
        val s = exists(m, isEven)
        val t = exists(n, isEven)
        assert(s, "Exists 1")
      }
    }
  )
  test("map transform each element according to given function")(
    {
      new TestSets {
        val m = union(s1, s2)
        def makeDouble(i: Int) = (2 * i)
        val s = null
      }
    }
  )
  import scala.concurrent.duration.*
  override val munitTimeout = 10.seconds
}
error while checking package funsets {
  class FunSetSuite extends munit.FunSuite {
    import FunSets.*
    test("contains is implemented")(
      {
        assert(contains(x => true, 100))
      }
    )
    trait TestSets {
      val s1 = singletonSet(1)
      val s2 = singletonSet(2)
      val s3 = singletonSet(3)
    }
    test("singleton set one contains one")(
      {
        new TestSets {
          assert(contains(s1, 1), "Singleton")
        }
      }
    )
    test("union contains all elements of each set")(
      {
        new TestSets {
          val s = union(s1, s2)
          assert(contains(s, 1), "Union 1")
          assert(contains(s, 2), "Union 2")
          assert(! contains(s, 3), "Union 3")
        }
      }
    )
    test("intersect contains all elements both in set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = intersect(m, n)
          assert(! contains(s, 1), "Intersect 1")
          assert(contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("difference contains all element both in set but not in another set")(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = union(s2, s3)
          val s = diff(m, n)
          assert(contains(s, 1), "Intersect 1")
          assert(! contains(s, 2), "Intersect 2")
          assert(! contains(s, 3), "Intersect 2")
        }
      }
    )
    test("filter contains all element that holds given predicate")(
      {
        new TestSets {
          val m = union(s1, s2)
          def isEven(i: Int) = (i % 2 == 0)
          val s = filter(m, isEven)
          assert(! contains(s, 1), "Filter 1")
          assert(contains(s, 2), "Filter 2")
        }
      }
    )
    test(
      "exists checks whether there exists a element that satisfies given predicate"
    )(
      {
        new TestSets {
          val m = union(s1, s2)
          val n = singletonSet(1001)
          def isEven(i: Int) = (i % 2 == 0)
          val s = exists(m, isEven)
          val t = exists(n, isEven)
          assert(s, "Exists 1")
        }
      }
    )
    test("map transform each element according to given function")(
      {
        new TestSets {
          val m = union(s1, s2)
          def makeDouble(i: Int) = (2 * i)
          val s = null
        }
      }
    )
    import scala.concurrent.duration.*
    override val munitTimeout = 10.seconds
  }
}
9월 15, 2022 6:27:59 오후 scala.meta.internal.pc.CompilerAccess handleError
심각: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def makeDouble(i: Int) = (2 * i)
  val s = null
} # -1,
parent span = <3283..3372>,
child       = val s = null # -1,
child span  = [3367..3371..3376]
java.lang.AssertionError: assertion failed: position error, parent span does not contain child span
parent      =  extends TestSets {
  val m = union(s1, s2)
  def makeDouble(i: Int) = (2 * i)
  val s = null
} # -1,
parent span = <3283..3372>,
child       = val s = null # -1,
child span  = [3367..3371..3376]
	at scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)
	at dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)
	at dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$1(ParserPhase.scala:38)
	at dotty.tools.dotc.parsing.Parser.parse$$anonfun$adapted$1(ParserPhase.scala:39)
	at scala.Function0.apply$mcV$sp(Function0.scala:39)
	at dotty.tools.dotc.core.Phases$Phase.monitor(Phases.scala:414)
	at dotty.tools.dotc.parsing.Parser.parse(ParserPhase.scala:39)
	at dotty.tools.dotc.parsing.Parser.runOn$$anonfun$1(ParserPhase.scala:48)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at dotty.tools.dotc.parsing.Parser.runOn(ParserPhase.scala:48)
	at dotty.tools.dotc.Run.runPhases$1$$anonfun$1(Run.scala:225)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)
	at dotty.tools.dotc.Run.runPhases$1(Run.scala:236)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:244)
	at dotty.tools.dotc.Run.compileUnits$$anonfun$adapted$1(Run.scala:253)
	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:68)
	at dotty.tools.dotc.Run.compileUnits(Run.scala:253)
	at dotty.tools.dotc.Run.compileSources(Run.scala:186)
	at dotty.tools.dotc.interactive.InteractiveDriver.run(InteractiveDriver.scala:165)
	at scala.meta.internal.pc.completions.CompletionsProvider.completions(CompletionsProvider.scala:41)

2022.09.15 18:28:54 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 18:29:09 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
2022.09.15 18:29:11 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\test\scala\funsets\FunSetSuite.scala
9월 15, 2022 6:34:23 오후 org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
경고: Unmatched cancel notification for request id 5656
2022.09.15 18:43:53 INFO  shutting down Metals
2022.09.15 21:32:15 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\.metals\lsp.trace.json or C:\Users\dangn\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.09.15 21:32:18 INFO  logging to file C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\.metals\metals.log
2022.09.15 21:32:18 INFO  Started: Metals version 0.11.8 in workspace 'C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets' for client Visual Studio Code 1.71.1.
2022.09.15 21:32:24 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.09.15 21:32:24 INFO  time: initialize in 6.31s
2022.09.15 21:32:31 WARN  Build server is not auto-connectable.
2022.09.15 21:32:31 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.15 21:32:33 INFO  skipping build import with status 'Requested'
2022.09.15 21:32:48 INFO  no build target found for C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.09.15 21:32:59 INFO  time: code lens generation in 25s
2022.09.16 13:54:54 INFO  tracing is disabled for protocol LSP, to enable tracing of incoming and outgoing JSON messages create an empty file at c:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\.metals\lsp.trace.json or C:\Users\dangn\AppData\Local\scalameta\metals\cache\lsp.trace.json
2022.09.16 13:54:58 INFO  logging to file C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\.metals\metals.log
2022.09.16 13:54:58 INFO  Started: Metals version 0.11.8 in workspace 'C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets' for client Visual Studio Code 1.71.1.
2022.09.16 13:55:10 WARN  Flyway upgrade recommended: H2 2.1.214 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.1.210.
2022.09.16 13:55:12 INFO  time: initialize in 13s
2022.09.16 13:55:21 WARN  Build server is not auto-connectable.
2022.09.16 13:55:21 WARN  no build target for: C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala
2022.09.16 13:55:23 INFO  skipping build import with status 'Requested'
2022.09.16 13:55:40 INFO  no build target found for C:\Users\dangn\Documents\2022 Fall\Software Design Methods\cs434\Functional Programming Principles in Scala\assn\funsets\src\main\scala\funsets\FunSets.scala. Using presentation compiler with project's scala-library version: 3.1.3
2022.09.16 13:55:51 INFO  time: code lens generation in 23s
2022.09.16 18:14:47 INFO  shutting down Metals
